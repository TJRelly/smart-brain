{"version":3,"file":"proton.min.js","sources":["../src/math/MathUtil.js","../src/math/Span.js","../src/utils/WebGLUtil.js","../src/utils/DomUtil.js","../src/utils/ImgUtil.js","../src/utils/Util.js","../src/utils/Puid.js","../src/core/Pool.js","../src/debug/Stats.js","../src/events/EventDispatcher.js","../src/math/Integration.js","../src/core/Proton.js","../src/utils/Rgb.js","../src/math/ease.js","../src/math/Vector2D.js","../src/core/Particle.js","../src/utils/ColorUtil.js","../src/math/Polar2D.js","../src/math/Mat3.js","../src/math/ArraySpan.js","../src/math/Rectangle.js","../src/initialize/Rate.js","../src/initialize/Initialize.js","../src/initialize/Life.js","../src/zone/Zone.js","../src/zone/PointZone.js","../src/initialize/Position.js","../src/initialize/Velocity.js","../src/initialize/Mass.js","../src/initialize/Radius.js","../src/initialize/Body.js","../src/behaviour/Behaviour.js","../src/behaviour/Force.js","../src/behaviour/Attraction.js","../src/behaviour/RandomDrift.js","../src/behaviour/Gravity.js","../src/behaviour/Collision.js","../src/behaviour/CrossZone.js","../src/behaviour/Alpha.js","../src/behaviour/Scale.js","../src/behaviour/Rotate.js","../src/behaviour/Color.js","../src/behaviour/Cyclone.js","../src/behaviour/Repulsion.js","../src/behaviour/GravityWell.js","../src/initialize/InitializeUtil.js","../src/emitter/Emitter.js","../src/emitter/BehaviourEmitter.js","../src/emitter/FollowEmitter.js","../src/render/BaseRenderer.js","../src/render/CanvasRenderer.js","../src/render/DomRenderer.js","../src/render/EaselRenderer.js","../src/render/PixelRenderer.js","../src/render/PixiRenderer.js","../src/utils/MStack.js","../src/render/WebGLRenderer.js","../src/render/CustomRenderer.js","../src/zone/LineZone.js","../src/zone/CircleZone.js","../src/zone/RectZone.js","../src/zone/ImageZone.js","../src/debug/Debug.js","../src/index.js"],"sourcesContent":["const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n"],"names":["PI","MathUtil","num","this","Infinity","a","b","Math","floor","random","center","f","isInt","randomAToB","toString","slice","k","digits","pow","Span","isArray","Util","getRandFromArray","randomFloating","c","undefined","pan","getValue","initValue","length","i","tx","ty","angleInRadians","cos","s","sin","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","y","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","e","target","canvas","WebGLUtil","DomUtil","createCanvas","getContext","value","defaults","Object","prototype","call","arr","obj","ignore","indexOf","constructor","args","bind","apply","concat","particle","conf","hasProp","p","v","copy","props","prop","hasOwnProperty","getSpanValue","ImgUtil","destroy","source","assign","idsMap","Puid","type","uid","getIdFromCache","_index","_cache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","destroyAll","destroyOther","getAllParticles","fps","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","Rgb","r","g","PI_2","sqrt","ease","easeLinear","Vector2D","atan2","w","addVectors","subVectors","set","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","N180_PI","life","age","dead","sprite","energy","radius","rotation","easing","rgb","reset","emptyObject","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","emptyArray","setProp","h","hex16","substring","parseInt","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","toArray","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imageTarget","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","overlap","totalMass","averageMass1","averageMass2","distance","newPool","otherParticle","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","ColorUtil","hexToRgb","colorB","CHANGING","Cyclone","angle","span","String","toLowerCase","setAngleAndForce","cangle","cyclone","gradient","getGradient","Repulsion","GravityWell","centerPoint","distanceVec","factor","distanceSq","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","get","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","bufContext","buffer","createBuffer","globalAlpha","globalCompositeOperation","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","A","blendEquation","B","blendFunc","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","WebGLRenderer","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","CircleZone","PIx2","randomRadius","d","distanceTo","RectZone","vectors","setVectors","j","length1","length2","getBound","negate","ImageZone","func","getStyle","moveTo","lineTo","drawRect","Vector","Polar","getSpan","Init","L","P","V","M","R","F","RD","G","S","WebGlRenderer","Debug"],"mappings":"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"}