{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar axios = require('axios');\n\nvar Concepts = require('./Concepts');\n\nvar Regions = require('./Regions');\n\nvar _require = require('./constants'),\n    API = _require.API;\n\nvar INPUTS_PATH = API.INPUTS_PATH;\n/**\n * class representing an input\n * @class\n */\n\nvar Input = function () {\n  function Input(_config, data) {\n    _classCallCheck(this, Input);\n\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = {\n        geoPoint: data.data.geo['geo_point']\n      };\n    }\n\n    this.rawData = data;\n    this._config = _config;\n  }\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  _createClass(Input, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts(concepts, metadata) {\n      return this._update('merge', concepts, metadata);\n    }\n    /**\n     * Delete concept from an input\n     * @param {object[]}         concepts    Object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id        The concept id (required)\n     *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(concepts, metadata) {\n      return this._update('remove', concepts, metadata);\n    }\n    /**\n     * Overwrite inputs\n     * @param {object[]}         concepts                      Array of object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id         The concept id (required)\n     *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(concepts, metadata) {\n      return this._update('overwrite', concepts, metadata);\n    }\n  }, {\n    key: '_update',\n    value: function _update(action) {\n      var concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputData = {};\n\n      if (concepts.length) {\n        inputData.concepts = concepts;\n      }\n\n      if (metadata !== null) {\n        inputData.metadata = metadata;\n      }\n\n      var data = {\n        action: action,\n        inputs: [{\n          id: this.id,\n          data: inputData\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          return axios.patch(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Input;\n}();\n\n;\nmodule.exports = Input;","map":{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","axios","require","Concepts","Regions","_require","API","INPUTS_PATH","Input","_config","data","id","createdAt","created_at","imageUrl","image","url","concepts","regions","score","metadata","geo","geoPoint","rawData","value","mergeConcepts","_update","deleteConcepts","overwriteConcepts","action","arguments","undefined","basePath","inputData","inputs","wrapToken","headers","Promise","resolve","reject","patch","then","response","isSuccess","input","module","exports"],"sources":["C:/Users/xxter/Documents/Coding/smart-brain/node_modules/clarifai/dist/Input.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = require('axios');\nvar Concepts = require('./Concepts');\nvar Regions = require('./Regions');\n\nvar _require = require('./constants'),\n    API = _require.API;\n\nvar INPUTS_PATH = API.INPUTS_PATH;\n\n/**\n * class representing an input\n * @class\n */\n\nvar Input = function () {\n  function Input(_config, data) {\n    _classCallCheck(this, Input);\n\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = { geoPoint: data.data.geo['geo_point'] };\n    }\n    this.rawData = data;\n    this._config = _config;\n  }\n\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  _createClass(Input, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts(concepts, metadata) {\n      return this._update('merge', concepts, metadata);\n    }\n\n    /**\n     * Delete concept from an input\n     * @param {object[]}         concepts    Object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id        The concept id (required)\n     *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(concepts, metadata) {\n      return this._update('remove', concepts, metadata);\n    }\n\n    /**\n     * Overwrite inputs\n     * @param {object[]}         concepts                      Array of object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id         The concept id (required)\n     *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(concepts, metadata) {\n      return this._update('overwrite', concepts, metadata);\n    }\n  }, {\n    key: '_update',\n    value: function _update(action) {\n      var concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputData = {};\n      if (concepts.length) {\n        inputData.concepts = concepts;\n      }\n      if (metadata !== null) {\n        inputData.metadata = metadata;\n      }\n      var data = {\n        action: action,\n        inputs: [{\n          id: this.id,\n          data: inputData\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          return axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Input;\n}();\n\n;\n\nmodule.exports = Input;"],"mappings":"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"},"metadata":{},"sourceType":"script"}