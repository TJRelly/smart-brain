{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSortedRoutes = getSortedRoutes;\n\nclass UrlNode {\n  insert(urlPath) {\n    this._insert(urlPath.split('/').filter(Boolean), [], false);\n  }\n\n  smoosh() {\n    return this._smoosh();\n  }\n\n  _smoosh() {\n    let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    const childrenPaths = [...this.children.keys()].sort();\n\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n    }\n\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1);\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1);\n    }\n\n    const routes = childrenPaths.map(c => this.children.get(c)._smoosh(`${prefix}${c}/`)).reduce((prev, curr) => [...prev, ...curr], []);\n\n    if (this.slugName !== null) {\n      routes.push(...this.children.get('[]')._smoosh(`${prefix}[${this.slugName}]/`));\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1);\n\n      if (this.optionalRestSlugName != null) {\n        throw new Error(`You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`);\n      }\n\n      routes.unshift(r);\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(...this.children.get('[...]')._smoosh(`${prefix}[...${this.restSlugName}]/`));\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(...this.children.get('[[...]]')._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`));\n    }\n\n    return routes;\n  }\n\n  _insert(urlPaths, slugNames, isCatchAll) {\n    if (urlPaths.length === 0) {\n      this.placeholder = false;\n      return;\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`);\n    } // The next segment in the urlPaths list\n\n\n    let nextSegment = urlPaths[0]; // Check if the segment matches `[something]`\n\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1);\n      let isOptional = false;\n\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1);\n        isOptional = true;\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3);\n        isCatchAll = true;\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(`Segment names may not start or end with extra brackets ('${segmentName}').`);\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(`Segment names may not start with erroneous periods ('${segmentName}').`);\n      }\n\n      function handleSlug(previousSlug, nextSlug) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(`You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`);\n          }\n        }\n\n        slugNames.forEach(slug => {\n          if (slug === nextSlug) {\n            throw new Error(`You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`);\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(`You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`);\n          }\n        });\n        slugNames.push(nextSlug);\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(`You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`);\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName); // slugName is kept as it can only be one particular slugName\n\n          this.optionalRestSlugName = segmentName; // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n\n          nextSegment = '[[...]]';\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(`You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`);\n          }\n\n          handleSlug(this.restSlugName, segmentName); // slugName is kept as it can only be one particular slugName\n\n          this.restSlugName = segmentName; // nextSegment is overwritten to [...] so that it can later be sorted specifically\n\n          nextSegment = '[...]';\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(`Optional route parameters are not yet supported (\"${urlPaths[0]}\").`);\n        }\n\n        handleSlug(this.slugName, segmentName); // slugName is kept as it can only be one particular slugName\n\n        this.slugName = segmentName; // nextSegment is overwritten to [] so that it can later be sorted specifically\n\n        nextSegment = '[]';\n      }\n    } // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n\n\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode());\n    }\n\n    this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);\n  }\n\n  constructor() {\n    this.placeholder = true;\n    this.children = new Map();\n    this.slugName = null;\n    this.restSlugName = null;\n    this.optionalRestSlugName = null;\n  }\n\n}\n\nfunction getSortedRoutes(normalizedPages) {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode(); // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n\n  normalizedPages.forEach(pagePath => root.insert(pagePath)); // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n\n  return root.smoosh();\n}","map":{"version":3,"mappings":"AAAA;;;;;QAqMgBA;;AArMhB,MAAMC,OAAN,CAAa;EAOXC,MAAM,CAACC,OAAD,EAAwB;IAC5B,KAAKC,OAAL,CAAaD,OAAO,CAACE,KAARF,CAAc,GAAdA,EAAmBG,MAAnBH,CAA0BI,OAA1BJ,CAAb,EAAiD,EAAjD,EAAqD,KAArD;EACD;;EAEDK,MAAM,GAAa;IACjB,OAAO,KAAKC,OAAL,EAAP;EACD;;EAEDA,OAAe,GAAiC;IAAA,IAAhCC,MAAgC,uEAAf,GAAe;IAC9C,MAAMC,aAAa,GAAG,IAAI,KAAKC,QAAL,CAAcC,IAAd,EAAJ,EAA0BC,IAA1B,EAAtB;;IACA,IAAI,KAAKC,QAAL,KAAkB,IAAtB,EAA4B;MAC1BJ,aAAa,CAACK,MAAdL,CAAqBA,aAAa,CAACM,OAAdN,CAAsB,IAAtBA,CAArBA,EAAkD,CAAlDA;IACD;;IACD,IAAI,KAAKO,YAAL,KAAsB,IAA1B,EAAgC;MAC9BP,aAAa,CAACK,MAAdL,CAAqBA,aAAa,CAACM,OAAdN,CAAsB,OAAtBA,CAArBA,EAAqD,CAArDA;IACD;;IACD,IAAI,KAAKQ,oBAAL,KAA8B,IAAlC,EAAwC;MACtCR,aAAa,CAACK,MAAdL,CAAqBA,aAAa,CAACM,OAAdN,CAAsB,SAAtBA,CAArBA,EAAuD,CAAvDA;IACD;;IAED,MAAMS,MAAM,GAAGT,aAAa,CACzBU,GADYV,CACPW,CAAD,IAAO,KAAKV,QAAL,CAAcW,GAAd,CAAkBD,CAAlB,EAAsBb,OAAtB,CAA+B,GAAEC,MAAO,GAAEY,CAAE,GAA5C,CADCX,EAEZa,MAFYb,CAEL,CAACc,IAAD,EAAOC,IAAP,KAAgB,IAAID,IAAJ,KAAaC,IAAb,CAFXf,EAE+B,EAF/BA,CAAf;;IAIA,IAAI,KAAKI,QAAL,KAAkB,IAAtB,EAA4B;MAC1BK,MAAM,CAACO,IAAPP,CAAW,GACN,KAAKR,QAAL,CAAcW,GAAd,CAAkB,IAAlB,EAAyBd,OAAzB,CAAkC,GAAEC,MAAO,IAAG,KAAKK,QAAS,IAA5D,CADLK;IAGD;;IAED,IAAI,CAAC,KAAKQ,WAAV,EAAuB;MACrB,MAAMC,CAAC,GAAGnB,MAAM,KAAK,GAAXA,GAAiB,GAAjBA,GAAuBA,MAAM,CAACoB,KAAPpB,CAAa,CAAbA,EAAgB,CAAC,CAAjBA,CAAjC;;MACA,IAAI,KAAKS,oBAAL,IAA6B,IAAjC,EAAuC;QACrC,MAAM,IAAIY,KAAJ,CACH,uFAAsFF,CAAE,UAASA,CAAE,QAAO,KAAKV,oBAAqB,OADjI,CAAN;MAGD;;MAEDC,MAAM,CAACY,OAAPZ,CAAeS,CAAfT;IACD;;IAED,IAAI,KAAKF,YAAL,KAAsB,IAA1B,EAAgC;MAC9BE,MAAM,CAACO,IAAPP,CAAW,GACN,KAAKR,QAAL,CACAW,GADA,CACI,OADJ,EAEAd,OAFA,CAES,GAAEC,MAAO,OAAM,KAAKQ,YAAa,IAF1C,CADLE;IAKD;;IAED,IAAI,KAAKD,oBAAL,KAA8B,IAAlC,EAAwC;MACtCC,MAAM,CAACO,IAAPP,CAAW,GACN,KAAKR,QAAL,CACAW,GADA,CACI,SADJ,EAEAd,OAFA,CAES,GAAEC,MAAO,QAAO,KAAKS,oBAAqB,KAFnD,CADLC;IAKD;;IAED,OAAOA,MAAP;EACD;;EAEDhB,OAAe,CACb6B,QADa,EAEbC,SAFa,EAGbC,UAHa,EAIP;IACN,IAAIF,QAAQ,CAACG,MAATH,KAAoB,CAAxB,EAA2B;MACzB,KAAKL,WAAL,GAAmB,KAAnB;MACA;IACD;;IAED,IAAIO,UAAJ,EAAgB;MACd,MAAM,IAAIJ,KAAJ,CAAW,6CAAX,CAAN;IACD,CARK,CAUN;;;IACA,IAAIM,WAAW,GAAGJ,QAAQ,CAAC,CAAD,CAA1B,CAXM,CAaN;;IACA,IAAII,WAAW,CAACC,UAAZD,CAAuB,GAAvBA,KAA+BA,WAAW,CAACE,QAAZF,CAAqB,GAArBA,CAAnC,EAA8D;MAC5D;MACA,IAAIG,WAAW,GAAGH,WAAW,CAACP,KAAZO,CAAkB,CAAlBA,EAAqB,CAAC,CAAtBA,CAAlB;MAEA,IAAII,UAAU,GAAG,KAAjB;;MACA,IAAID,WAAW,CAACF,UAAZE,CAAuB,GAAvBA,KAA+BA,WAAW,CAACD,QAAZC,CAAqB,GAArBA,CAAnC,EAA8D;QAC5D;QACAA,WAAW,GAAGA,WAAW,CAACV,KAAZU,CAAkB,CAAlBA,EAAqB,CAAC,CAAtBA,CAAdA;QACAC,UAAU,GAAG,IAAbA;MACD;;MAED,IAAID,WAAW,CAACF,UAAZE,CAAuB,KAAvBA,CAAJ,EAAmC;QACjC;QACAA,WAAW,GAAGA,WAAW,CAACE,SAAZF,CAAsB,CAAtBA,CAAdA;QACAL,UAAU,GAAG,IAAbA;MACD;;MAED,IAAIK,WAAW,CAACF,UAAZE,CAAuB,GAAvBA,KAA+BA,WAAW,CAACD,QAAZC,CAAqB,GAArBA,CAAnC,EAA8D;QAC5D,MAAM,IAAIT,KAAJ,CACH,4DAA2DS,WAAY,KADpE,CAAN;MAGD;;MAED,IAAIA,WAAW,CAACF,UAAZE,CAAuB,GAAvBA,CAAJ,EAAiC;QAC/B,MAAM,IAAIT,KAAJ,CACH,wDAAuDS,WAAY,KADhE,CAAN;MAGD;;MAED,SAASG,UAAT,CAAoBC,YAApB,EAAiDC,QAAjD,EAAmE;QACjE,IAAID,YAAY,KAAK,IAArB,EAA2B;UACzB;UACA;UACA;UACA;UACA;UACA,IAAIA,YAAY,KAAKC,QAArB,EAA+B;YAC7B;YACA,MAAM,IAAId,KAAJ,CACH,mEAAkEa,YAAa,UAASC,QAAS,KAD9F,CAAN;UAGD;QACF;;QAEDX,SAAS,CAACY,OAAVZ,CAAmBa,IAAD,IAAU;UAC1B,IAAIA,IAAI,KAAKF,QAAb,EAAuB;YACrB,MAAM,IAAId,KAAJ,CACH,uCAAsCc,QAAS,uCAD5C,CAAN;UAGD;;UAED,IAAIE,IAAI,CAACC,OAALD,CAAY,KAAZA,EAAoB,EAApBA,MAA4BV,WAAW,CAACW,OAAZX,CAAmB,KAAnBA,EAA2B,EAA3BA,CAAhC,EAAgE;YAC9D,MAAM,IAAIN,KAAJ,CACH,mCAAkCgB,IAAK,UAASF,QAAS,gEADtD,CAAN;UAGD;QACF,CAZDX;QAcAA,SAAS,CAACP,IAAVO,CAAeW,QAAfX;MACD;;MAED,IAAIC,UAAJ,EAAgB;QACd,IAAIM,UAAJ,EAAgB;UACd,IAAI,KAAKvB,YAAL,IAAqB,IAAzB,EAA+B;YAC7B,MAAM,IAAIa,KAAJ,CACH,wFAAuF,KAAKb,YAAa,WAAUe,QAAQ,CAAC,CAAD,CAAI,MAD5H,CAAN;UAGD;;UAEDU,UAAU,CAAC,KAAKxB,oBAAN,EAA4BqB,WAA5B,CAAVG,CAPc,CAQd;;UACA,KAAKxB,oBAAL,GAA4BqB,WAA5B,CATc,CAUd;;UACAH,WAAW,GAAG,SAAdA;QACD,CAZD,MAYO;UACL,IAAI,KAAKlB,oBAAL,IAA6B,IAAjC,EAAuC;YACrC,MAAM,IAAIY,KAAJ,CACH,yFAAwF,KAAKZ,oBAAqB,YAAWc,QAAQ,CAAC,CAAD,CAAI,KADtI,CAAN;UAGD;;UAEDU,UAAU,CAAC,KAAKzB,YAAN,EAAoBsB,WAApB,CAAVG,CAPK,CAQL;;UACA,KAAKzB,YAAL,GAAoBsB,WAApB,CATK,CAUL;;UACAH,WAAW,GAAG,OAAdA;QACD;MACF,CA1BD,MA0BO;QACL,IAAII,UAAJ,EAAgB;UACd,MAAM,IAAIV,KAAJ,CACH,qDAAoDE,QAAQ,CAAC,CAAD,CAAI,KAD7D,CAAN;QAGD;;QACDU,UAAU,CAAC,KAAK5B,QAAN,EAAgByB,WAAhB,CAAVG,CANK,CAOL;;QACA,KAAK5B,QAAL,GAAgByB,WAAhB,CARK,CASL;;QACAH,WAAW,GAAG,IAAdA;MACD;IACF,CAjHK,CAmHN;;;IACA,IAAI,CAAC,KAAKzB,QAAL,CAAcqC,GAAd,CAAkBZ,WAAlB,CAAL,EAAqC;MACnC,KAAKzB,QAAL,CAAcsC,GAAd,CAAkBb,WAAlB,EAA+B,IAAIpC,OAAJ,EAA/B;IACD;;IAED,KAAKW,QAAL,CACGW,GADH,CACOc,WADP,EAEGjC,OAFH,CAEW6B,QAAQ,CAACH,KAATG,CAAe,CAAfA,CAFX,EAE8BC,SAF9B,EAEyCC,UAFzC;EAGD;;;IAjMDP,mBAAuB,IAAvBA;IACAhB,gBAAiC,IAAIuC,GAAJ,EAAjCvC;IACAG,gBAA0B,IAA1BA;IACAG,oBAA8B,IAA9BA;IACAC,4BAAsC,IAAtCA;;;AALW;;AAqMN,SAASnB,eAAT,CACLoD,eADK,EAEK;EACV;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,IAAI,GAAG,IAAIpD,OAAJ,EAAb,CAZU,CAcV;;EACAmD,eAAe,CAACN,OAAhBM,CAAyBE,QAAD,IAAcD,IAAI,CAACnD,MAALmD,CAAYC,QAAZD,CAAtCD,EAfU,CAgBV;;EACA,OAAOC,IAAI,CAAC7C,MAAL6C,EAAP;AACD","names":["getSortedRoutes","UrlNode","insert","urlPath","_insert","split","filter","Boolean","smoosh","_smoosh","prefix","childrenPaths","children","keys","sort","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","map","c","get","reduce","prev","curr","push","placeholder","r","slice","Error","unshift","urlPaths","slugNames","isCatchAll","length","nextSegment","startsWith","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","replace","has","set","Map","normalizedPages","root","pagePath"],"sources":["../../../../../../src/shared/lib/router/utils/sorted-routes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}