{"ast":null,"code":"'use strict';\n\nvar SUCCESS_CODES = [200, 201];\nmodule.exports = {\n  isSuccess: function isSuccess(response) {\n    return SUCCESS_CODES.indexOf(response.status) > -1;\n  },\n  deleteEmpty: function deleteEmpty(obj) {\n    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    Object.keys(obj).forEach(function (key) {\n      if (obj[key] === null || obj[key] === undefined || strict === true && (obj[key] === '' || obj[key].length === 0 || Object.keys(obj[key]).length === 0)) {\n        delete obj[key];\n      }\n    });\n  },\n  clone: function clone(obj) {\n    var keys = Object.keys(obj);\n    var copy = {};\n    keys.forEach(function (k) {\n      copy[k] = obj[k];\n    });\n    return copy;\n  },\n  checkType: function checkType(regex, val) {\n    if (regex instanceof RegExp === false) {\n      regex = new RegExp(regex);\n    }\n\n    return regex.test(Object.prototype.toString.call(val));\n  }\n};","map":{"version":3,"names":["SUCCESS_CODES","module","exports","isSuccess","response","indexOf","status","deleteEmpty","obj","strict","arguments","length","undefined","Object","keys","forEach","key","clone","copy","k","checkType","regex","val","RegExp","test","prototype","toString","call"],"sources":["C:/Users/xxter/Documents/Coding/smart-brain/node_modules/clarifai/dist/helpers.js"],"sourcesContent":["'use strict';\n\nvar SUCCESS_CODES = [200, 201];\n\nmodule.exports = {\n  isSuccess: function isSuccess(response) {\n    return SUCCESS_CODES.indexOf(response.status) > -1;\n  },\n  deleteEmpty: function deleteEmpty(obj) {\n    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    Object.keys(obj).forEach(function (key) {\n      if (obj[key] === null || obj[key] === undefined || strict === true && (obj[key] === '' || obj[key].length === 0 || Object.keys(obj[key]).length === 0)) {\n        delete obj[key];\n      }\n    });\n  },\n  clone: function clone(obj) {\n    var keys = Object.keys(obj);\n    var copy = {};\n    keys.forEach(function (k) {\n      copy[k] = obj[k];\n    });\n    return copy;\n  },\n  checkType: function checkType(regex, val) {\n    if (regex instanceof RegExp === false) {\n      regex = new RegExp(regex);\n    }\n    return regex.test(Object.prototype.toString.call(val));\n  }\n};"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAG,CAAC,GAAD,EAAM,GAAN,CAApB;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfC,SAAS,EAAE,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;IACtC,OAAOJ,aAAa,CAACK,OAAd,CAAsBD,QAAQ,CAACE,MAA/B,IAAyC,CAAC,CAAjD;EACD,CAHc;EAIfC,WAAW,EAAE,SAASA,WAAT,CAAqBC,GAArB,EAA0B;IACrC,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAjF;IAEAG,MAAM,CAACC,IAAP,CAAYN,GAAZ,EAAiBO,OAAjB,CAAyB,UAAUC,GAAV,EAAe;MACtC,IAAIR,GAAG,CAACQ,GAAD,CAAH,KAAa,IAAb,IAAqBR,GAAG,CAACQ,GAAD,CAAH,KAAaJ,SAAlC,IAA+CH,MAAM,KAAK,IAAX,KAAoBD,GAAG,CAACQ,GAAD,CAAH,KAAa,EAAb,IAAmBR,GAAG,CAACQ,GAAD,CAAH,CAASL,MAAT,KAAoB,CAAvC,IAA4CE,MAAM,CAACC,IAAP,CAAYN,GAAG,CAACQ,GAAD,CAAf,EAAsBL,MAAtB,KAAiC,CAAjG,CAAnD,EAAwJ;QACtJ,OAAOH,GAAG,CAACQ,GAAD,CAAV;MACD;IACF,CAJD;EAKD,CAZc;EAafC,KAAK,EAAE,SAASA,KAAT,CAAeT,GAAf,EAAoB;IACzB,IAAIM,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYN,GAAZ,CAAX;IACA,IAAIU,IAAI,GAAG,EAAX;IACAJ,IAAI,CAACC,OAAL,CAAa,UAAUI,CAAV,EAAa;MACxBD,IAAI,CAACC,CAAD,CAAJ,GAAUX,GAAG,CAACW,CAAD,CAAb;IACD,CAFD;IAGA,OAAOD,IAAP;EACD,CApBc;EAqBfE,SAAS,EAAE,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;IACxC,IAAID,KAAK,YAAYE,MAAjB,KAA4B,KAAhC,EAAuC;MACrCF,KAAK,GAAG,IAAIE,MAAJ,CAAWF,KAAX,CAAR;IACD;;IACD,OAAOA,KAAK,CAACG,IAAN,CAAWX,MAAM,CAACY,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,GAA/B,CAAX,CAAP;EACD;AA1Bc,CAAjB"},"metadata":{},"sourceType":"script"}