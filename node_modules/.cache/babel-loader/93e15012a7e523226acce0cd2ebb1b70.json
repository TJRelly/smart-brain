{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cssValue = exports.parseLengthAndUnit = void 0;\nvar cssUnit = {\n  cm: true,\n  mm: true,\n  in: true,\n  px: true,\n  pt: true,\n  pc: true,\n  em: true,\n  ex: true,\n  ch: true,\n  rem: true,\n  vw: true,\n  vh: true,\n  vmin: true,\n  vmax: true,\n  \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\n\nfunction parseLengthAndUnit(size) {\n  if (typeof size === \"number\") {\n    return {\n      value: size,\n      unit: \"px\"\n    };\n  }\n\n  var value;\n  var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n\n  if (valueString.includes(\".\")) {\n    value = parseFloat(valueString);\n  } else {\n    value = parseInt(valueString, 10);\n  }\n\n  var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n\n  if (cssUnit[unit]) {\n    return {\n      value: value,\n      unit: unit\n    };\n  }\n\n  console.warn(\"React Spinners: \".concat(size, \" is not a valid css value. Defaulting to \").concat(value, \"px.\"));\n  return {\n    value: value,\n    unit: \"px\"\n  };\n}\n\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\n\nfunction cssValue(value) {\n  var lengthWithunit = parseLengthAndUnit(value);\n  return \"\".concat(lengthWithunit.value).concat(lengthWithunit.unit);\n}\n\nexports.cssValue = cssValue;","map":{"version":3,"names":["Object","defineProperty","exports","value","cssValue","parseLengthAndUnit","cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","size","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","concat","lengthWithunit"],"sources":["C:/Users/xxter/Documents/Coding/smart-brain/node_modules/react-spinners/helpers/unitConverter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cssValue = exports.parseLengthAndUnit = void 0;\nvar cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true,\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nfunction parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\",\n        };\n    }\n    var value;\n    var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit,\n        };\n    }\n    console.warn(\"React Spinners: \".concat(size, \" is not a valid css value. Defaulting to \").concat(value, \"px.\"));\n    return {\n        value: value,\n        unit: \"px\",\n    };\n}\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nfunction cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\".concat(lengthWithunit.value).concat(lengthWithunit.unit);\n}\nexports.cssValue = cssValue;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,kBAAR,GAA6B,KAAK,CAArD;AACA,IAAIC,OAAO,GAAG;EACVC,EAAE,EAAE,IADM;EAEVC,EAAE,EAAE,IAFM;EAGVC,EAAE,EAAE,IAHM;EAIVC,EAAE,EAAE,IAJM;EAKVC,EAAE,EAAE,IALM;EAMVC,EAAE,EAAE,IANM;EAOVC,EAAE,EAAE,IAPM;EAQVC,EAAE,EAAE,IARM;EASVC,EAAE,EAAE,IATM;EAUVC,GAAG,EAAE,IAVK;EAWVC,EAAE,EAAE,IAXM;EAYVC,EAAE,EAAE,IAZM;EAaVC,IAAI,EAAE,IAbI;EAcVC,IAAI,EAAE,IAdI;EAeV,KAAK;AAfK,CAAd;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASf,kBAAT,CAA4BgB,IAA5B,EAAkC;EAC9B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC1B,OAAO;MACHlB,KAAK,EAAEkB,IADJ;MAEHC,IAAI,EAAE;IAFH,CAAP;EAIH;;EACD,IAAInB,KAAJ;EACA,IAAIoB,WAAW,GAAG,CAACF,IAAI,CAACG,KAAL,CAAW,UAAX,KAA0B,EAA3B,EAA+BC,QAA/B,EAAlB;;EACA,IAAIF,WAAW,CAACG,QAAZ,CAAqB,GAArB,CAAJ,EAA+B;IAC3BvB,KAAK,GAAGwB,UAAU,CAACJ,WAAD,CAAlB;EACH,CAFD,MAGK;IACDpB,KAAK,GAAGyB,QAAQ,CAACL,WAAD,EAAc,EAAd,CAAhB;EACH;;EACD,IAAID,IAAI,GAAG,CAACD,IAAI,CAACG,KAAL,CAAW,UAAX,KAA0B,EAA3B,EAA+BC,QAA/B,EAAX;;EACA,IAAInB,OAAO,CAACgB,IAAD,CAAX,EAAmB;IACf,OAAO;MACHnB,KAAK,EAAEA,KADJ;MAEHmB,IAAI,EAAEA;IAFH,CAAP;EAIH;;EACDO,OAAO,CAACC,IAAR,CAAa,mBAAmBC,MAAnB,CAA0BV,IAA1B,EAAgC,2CAAhC,EAA6EU,MAA7E,CAAoF5B,KAApF,EAA2F,KAA3F,CAAb;EACA,OAAO;IACHA,KAAK,EAAEA,KADJ;IAEHmB,IAAI,EAAE;EAFH,CAAP;AAIH;;AACDpB,OAAO,CAACG,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,QAAT,CAAkBD,KAAlB,EAAyB;EACrB,IAAI6B,cAAc,GAAG3B,kBAAkB,CAACF,KAAD,CAAvC;EACA,OAAO,GAAG4B,MAAH,CAAUC,cAAc,CAAC7B,KAAzB,EAAgC4B,MAAhC,CAAuCC,cAAc,CAACV,IAAtD,CAAP;AACH;;AACDpB,OAAO,CAACE,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}